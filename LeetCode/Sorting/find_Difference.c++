/*
Q : You are given two strings s and t.

String t is generated by random shuffling string s and then add one more letter at a random position.

Return the letter that was added to t.

A:  My code 
class Solution {
public:
    char findTheDifference(string s, string t) {
       vector<string> store.push_back(s);
     char letter;
      for(char ch:t){
           if(store.find(ch)){
             store.push_back(ch);
           }
           else{
             letter = ch;
           }
      } 
        return letter;
    }
};

// has a lot of logic and syntax erros

Approach -1 : Store in map and then check frequency and increase frequency and then in t decrease frequency if new element is -1 that means it must be new 
Space : O(n)

Approach -2 : Find all the characters sums like a-1, b-2 c-3 we only assume and then substract the total sum of s and t and then we wil find the index of new element
T.C : O(n)
S.C : O(1);

Approach -3 : Use XOR, if same entity then it returns 0 like 1^1= 0 , a^a= 0,b^b= 0 ;  Jo new character hoga wo bach jaega baki sare zero ho jaege 
*/


// Approach -1 
class Solution {
public:
    char findTheDifference(string s, string t) {
        unordered_map<char,int>mpp;
        for(char &ch:s){
           mpp[ch]++;
        }
        for(char &ch:t){
            mpp[ch]--;
            if(mpp[ch]<0){    // in place of mpp[ch--] and if block you can do this too if(mpp.find(ch)==mpp.end()) return ch;
                return ch;
            }
        }
        return 'x'; // flow will never come here
    }
};

// Approach -2
class Solution {
public:
    char findTheDifference(string s, string t) {
        int sum_s = 0;
        for(char &ch:s){
            sum_s += ch;
        }
        int sums_t = 0;
        for(char &ch:t){
            sums_t+= ch;
        }
        // sum_t > sum_s
        return (char)(sums_t - sum_s);
    }
};

// Approach -3
class Solution {
public:
    char findTheDifference(string s, string t) {
        int XOR = 0;
        for(char &ch:s){
            XOR ^=ch;
        }
    
        for(char &ch:t){
            XOR ^=ch;
        }

        return (char)(XOR);
    }
};
